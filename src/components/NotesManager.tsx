// NotesManager lists all saved patient notes with search, preview,
// and export actions. Acts as the "records" dashboard.
import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  FileText, 
  Download, 
  Search, 
  Copy, 
  Trash2, 
  User, 
  Calendar,
  Eye
} from 'lucide-react';
import { PatientData } from './PatientForm';
import { useToast } from '@/hooks/use-toast';

interface NotesManagerProps {
  notes: PatientData[];
  onEditNote: (note: PatientData) => void;
  onDeleteNote: (noteId: string) => void;
}

export const NotesManager: React.FC<NotesManagerProps> = ({
  notes,
  onEditNote,
  onDeleteNote,
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const { toast } = useToast();

  // Basic text search across key fields
  const filteredNotes = notes.filter(note =>
    note.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    note.symptoms.toLowerCase().includes(searchTerm.toLowerCase()) ||
    note.diagnosis.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Same fallback as PatientView for a readable transcript preview
  const formatTranscriptWithSpeakers = (transcript: string): string => {
    if (!transcript.trim()) return '';
    
    // Split transcript into sentences and add alternating speaker labels
    const sentences = transcript.split(/[.!?]+/).filter(s => s.trim());
    let formattedTranscript = '';
    
    sentences.forEach((sentence, index) => {
      const trimmedSentence = sentence.trim();
      if (trimmedSentence) {
        const speaker = index % 2 === 0 ? 'Doctor' : 'Patient';
        formattedTranscript += `${speaker}: ${trimmedSentence}.\n\n`;
      }
    });
    
    return formattedTranscript.trim();
  };

  // Clipboard helper with toast feedback
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: "Patient information has been copied successfully.",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard.",
        variant: "destructive",
      });
    }
  };

  // Export a single note as a .txt file
  const downloadAsText = (note: PatientData) => {
    const content = `PATIENT INFORMATION
====================

Patient Name: ${note.patientName}
Age: ${note.age}
Gender: ${note.gender}
Date: ${new Date(note.createdAt).toLocaleDateString()}

SYMPTOMS / CHIEF COMPLAINT
--------------------------
${note.symptoms}

MEDICAL HISTORY
---------------
${note.medicalHistory}

DIAGNOSIS
---------
${note.diagnosis}

TREATMENT PLAN / NOTES
----------------------
${note.treatmentPlan}

ORIGINAL TRANSCRIPT
-------------------
${note.formattedTranscript || formatTranscriptWithSpeakers(note.transcript)}

Generated by Medical Conversation Transcriber
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `patient-${note.patientName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}-${new Date(note.createdAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download started",
      description: "Patient notes are being downloaded as text file.",
    });
  };

  const downloadAsPDF = (note: PatientData) => {
    // Lightweight HTML export that can be printed to PDF
    const content = `
<!DOCTYPE html>
<html>
<head>
    <title>Patient Report - ${note.patientName}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
        .header { border-bottom: 2px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px; }
        .title { color: #2563eb; font-size: 24px; font-weight: bold; }
        .patient-info { background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .section { margin-bottom: 25px; }
        .section-title { color: #1e293b; font-size: 16px; font-weight: bold; margin-bottom: 10px; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px; }
        .content { color: #334155; }
        .transcript { background: #f1f5f9; padding: 15px; border-radius: 6px; font-family: 'Courier New', monospace; font-size: 14px; }
    </style>
</head>
<body>
    <div class="header">
        <div class="title">Medical Patient Report</div>
        <div>Generated on ${new Date().toLocaleDateString()}</div>
    </div>
    
    <div class="patient-info">
        <strong>Patient:</strong> ${note.patientName} &nbsp;&nbsp;
        <strong>Age:</strong> ${note.age} &nbsp;&nbsp;
        <strong>Gender:</strong> ${note.gender} &nbsp;&nbsp;
        <strong>Date:</strong> ${new Date(note.createdAt).toLocaleDateString()}
    </div>

    <div class="section">
        <div class="section-title">Symptoms / Chief Complaint</div>
        <div class="content">${note.symptoms.replace(/\n/g, '<br>')}</div>
    </div>

    <div class="section">
        <div class="section-title">Medical History</div>
        <div class="content">${note.medicalHistory.replace(/\n/g, '<br>')}</div>
    </div>

    <div class="section">
        <div class="section-title">Diagnosis</div>
        <div class="content">${note.diagnosis.replace(/\n/g, '<br>')}</div>
    </div>

    <div class="section">
        <div class="section-title">Treatment Plan / Notes</div>
        <div class="content">${note.treatmentPlan.replace(/\n/g, '<br>')}</div>
    </div>

    <div class="section">
        <div class="section-title">Original Transcript</div>
        <div class="transcript">${(note.formattedTranscript || formatTranscriptWithSpeakers(note.transcript)).replace(/\n/g, '<br>')}</div>
    </div>
</body>
</html>
    `;

    const blob = new Blob([content], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `patient-${note.patientName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}-${new Date(note.createdAt).toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download started",
      description: "Patient notes downloaded as HTML (can be printed to PDF).",
    });
  };

  return (
    <Card className="medical-card p-6">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <FileText className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-semibold text-foreground">Patient Notes</h2>
            <Badge variant="secondary" className="ml-2">
              {notes.length} {notes.length === 1 ? 'note' : 'notes'}
            </Badge>
          </div>
        </div>

        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <Input
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search notes by patient name, symptoms, or diagnosis..."
            className="pl-10"
          />
        </div>

        {/* Notes List */}
        <ScrollArea className="h-[500px] w-full">
          <div className="space-y-4">
            {filteredNotes.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">
                {notes.length === 0 ? (
                  <div>
                    <FileText className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>No patient notes yet.</p>
                    <p className="text-sm">Record a conversation to create your first note.</p>
                  </div>
                ) : (
                  <div>
                    <Search className="w-8 h-8 mx-auto mb-4 opacity-50" />
                    <p>No notes match your search.</p>
                  </div>
                )}
              </div>
            ) : (
              filteredNotes.map((note) => (
                <Card key={note.id} className="p-4 border border-border hover:shadow-md transition-shadow">
                  <div className="space-y-3">
                    {/* Header */}
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <User className="w-5 h-5 text-primary" />
                        <div>
                          <h3 className="font-semibold text-foreground">{note.patientName}</h3>
                          <div className="flex items-center gap-4 text-sm text-muted-foreground">
                            <span>Age: {note.age}</span>
                            <span>Gender: {note.gender}</span>
                            <div className="flex items-center gap-1">
                              <Calendar className="w-3 h-3" />
                              {new Date(note.createdAt).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          onClick={() => onEditNote(note)}
                          variant="outline"
                          size="sm"
                          className="p-2"
                        >
                          <Eye className="w-4 h-4" />
                        </Button>
                        <Button
                          onClick={() => onDeleteNote(note.id)}
                          variant="outline"
                          size="sm"
                          className="p-2 text-destructive hover:text-destructive"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>

                    {/* Content Preview */}
                    <div className="space-y-2 text-sm">
                      {note.symptoms && (
                        <div>
                          <span className="font-medium text-foreground">Symptoms: </span>
                          <span className="text-muted-foreground">
                            {note.symptoms.length > 100 
                              ? `${note.symptoms.substring(0, 100)}...` 
                              : note.symptoms}
                          </span>
                        </div>
                      )}
                      {note.diagnosis && (
                        <div>
                          <span className="font-medium text-foreground">Diagnosis: </span>
                          <span className="text-muted-foreground">
                            {note.diagnosis.length > 100 
                              ? `${note.diagnosis.substring(0, 100)}...` 
                              : note.diagnosis}
                          </span>
                        </div>
                      )}
                    </div>

                    {/* Actions */}
                    <div className="flex gap-2 pt-2 border-t border-border">
                      <Button
                        onClick={() => copyToClipboard(`Patient: ${note.patientName}\nSymptoms: ${note.symptoms}\nDiagnosis: ${note.diagnosis}\nTreatment: ${note.treatmentPlan}`)}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        <Copy className="w-3 h-3 mr-1" />
                        Copy
                      </Button>
                      <Button
                        onClick={() => downloadAsText(note)}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        <Download className="w-3 h-3 mr-1" />
                        .txt
                      </Button>
                      <Button
                        onClick={() => downloadAsPDF(note)}
                        variant="outline"
                        size="sm"
                        className="text-xs"
                      >
                        <Download className="w-3 h-3 mr-1" />
                        .html
                      </Button>
                    </div>
                  </div>
                </Card>
              ))
            )}
          </div>
        </ScrollArea>
      </div>
    </Card>
  );
};
