// Read-only view of a saved patient's record with utilities to
// copy and download the record for documentation.
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { 
  User, 
  Calendar, 
  Stethoscope, 
  FileText, 
  ClipboardList, 
  Activity, 
  Edit3,
  Download,
  Copy,
  Trash2
} from 'lucide-react';
import { PatientData } from './PatientForm';
import { useToast } from '@/hooks/use-toast';

interface PatientViewProps {
  patientData: PatientData;
  onEdit: () => void;
  onDelete: (noteId: string) => void;
  onBack: () => void;
}

export const PatientView: React.FC<PatientViewProps> = ({
  patientData,
  onEdit,
  onDelete,
  onBack,
}) => {
  const { toast } = useToast();

  // Fallback formatter that alternates Doctor/Patient where AI did not
  // return a formatted transcript. Keeps content readable in exports.
  const formatTranscriptWithSpeakers = (transcript: string): string => {
    if (!transcript.trim()) return '';
    
    // Split transcript into sentences and add alternating speaker labels
    const sentences = transcript.split(/[.!?]+/).filter(s => s.trim());
    let formattedTranscript = '';
    
    sentences.forEach((sentence, index) => {
      const trimmedSentence = sentence.trim();
      if (trimmedSentence) {
        const speaker = index % 2 === 0 ? 'Doctor' : 'Patient';
        formattedTranscript += `${speaker}: ${trimmedSentence}.\n\n`;
      }
    });
    
    return formattedTranscript.trim();
  };

  // Utility to copy any string and show a toast confirmation/error
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: "Patient information has been copied successfully.",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard.",
        variant: "destructive",
      });
    }
  };

  // Export the entire record as a plain .txt file with clear sections
  const downloadAsText = () => {
    const content = `PATIENT INFORMATION
====================

Patient Name: ${patientData.patientName}
Age: ${patientData.age}
Gender: ${patientData.gender}
Date: ${new Date(patientData.createdAt).toLocaleDateString()}

VITAL SIGNS
-----------
Blood Pressure: ${patientData.bloodPressure || 'N/A'}
Heart Rate: ${patientData.heartRate || 'N/A'}
Temperature: ${patientData.temperature || 'N/A'}
Respiratory Rate: ${patientData.respiratoryRate || 'N/A'}
Oxygen Saturation: ${patientData.oxygenSaturation || 'N/A'}
Weight: ${patientData.weight || 'N/A'}
Height: ${patientData.height || 'N/A'}

SYMPTOMS / CHIEF COMPLAINT
--------------------------
${patientData.symptoms || 'N/A'}

MEDICAL HISTORY
---------------
${patientData.medicalHistory || 'N/A'}

DIAGNOSIS
---------
${patientData.diagnosis || 'N/A'}

TREATMENT PLAN / NOTES
----------------------
${patientData.treatmentPlan || 'N/A'}

ORIGINAL TRANSCRIPT
-------------------
${patientData.formattedTranscript || formatTranscriptWithSpeakers(patientData.transcript) || 'N/A'}

Generated by HeyCare Medical Documentation System
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `patient-${patientData.patientName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}-${new Date(patientData.createdAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download started",
      description: "Patient notes are being downloaded as text file.",
    });
  };

  // Copy a structured summary to the clipboard for quick sharing
  const copyFullRecord = () => {
    const fullRecord = `Patient: ${patientData.patientName}
Age: ${patientData.age} | Gender: ${patientData.gender}
Date: ${new Date(patientData.createdAt).toLocaleDateString()}

Symptoms: ${patientData.symptoms || 'N/A'}
Medical History: ${patientData.medicalHistory || 'N/A'}
Diagnosis: ${patientData.diagnosis || 'N/A'}
Treatment Plan: ${patientData.treatmentPlan || 'N/A'}

Vitals:
- Blood Pressure: ${patientData.bloodPressure || 'N/A'}
- Heart Rate: ${patientData.heartRate || 'N/A'}
- Temperature: ${patientData.temperature || 'N/A'}
- Respiratory Rate: ${patientData.respiratoryRate || 'N/A'}
- Oxygen Saturation: ${patientData.oxygenSaturation || 'N/A'}
- Weight: ${patientData.weight || 'N/A'}
- Height: ${patientData.height || 'N/A'}`;

    copyToClipboard(fullRecord);
  };

  return (
    <div className="space-y-6">
      {/* Header with Actions */}
      <Card className="medical-card">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <User className="w-6 h-6 text-primary" />
              <div>
                <CardTitle className="text-2xl">{patientData.patientName}</CardTitle>
                <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
                  <span>Age: {patientData.age}</span>
                  <span>Gender: {patientData.gender}</span>
                  <div className="flex items-center gap-1">
                    <Calendar className="w-3 h-3" />
                    {new Date(patientData.createdAt).toLocaleDateString()}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Button
                onClick={copyFullRecord}
                variant="outline"
                size="sm"
              >
                <Copy className="w-4 h-4 mr-2" />
                Copy All
              </Button>
              <Button
                onClick={downloadAsText}
                variant="outline"
                size="sm"
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
              <Button
                onClick={() => onDelete(patientData.id)}
                variant="outline"
                size="sm"
                className="text-destructive hover:text-destructive"
              >
                <Trash2 className="w-4 h-4 mr-2" />
                Delete
              </Button>
              <Button
                onClick={onEdit}
                className="bg-primary hover:bg-primary/90"
                size="sm"
              >
                <Edit3 className="w-4 h-4 mr-2" />
                Edit
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Vital Signs */}
      <Card className="medical-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5 text-primary" />
            Vital Signs
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Blood Pressure</p>
              <p className="font-medium">{patientData.bloodPressure || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Heart Rate</p>
              <p className="font-medium">{patientData.heartRate || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Temperature</p>
              <p className="font-medium">{patientData.temperature || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Respiratory Rate</p>
              <p className="font-medium">{patientData.respiratoryRate || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Oxygen Saturation</p>
              <p className="font-medium">{patientData.oxygenSaturation || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Weight</p>
              <p className="font-medium">{patientData.weight || 'N/A'}</p>
            </div>
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Height</p>
              <p className="font-medium">{patientData.height || 'N/A'}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Symptoms / Chief Complaint */}
      <Card className="medical-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Stethoscope className="w-5 h-5 text-primary" />
            Symptoms / Chief Complaint
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground whitespace-pre-wrap">
            {patientData.symptoms || 'No symptoms recorded.'}
          </p>
        </CardContent>
      </Card>

      {/* Medical History */}
      <Card className="medical-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5 text-primary" />
            Medical History
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground whitespace-pre-wrap">
            {patientData.medicalHistory || 'No medical history recorded.'}
          </p>
        </CardContent>
      </Card>

      {/* Diagnosis */}
      <Card className="medical-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5 text-primary" />
            Diagnosis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground whitespace-pre-wrap">
            {patientData.diagnosis || 'No diagnosis recorded.'}
          </p>
        </CardContent>
      </Card>

      {/* Treatment Plan / Notes */}
      <Card className="medical-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ClipboardList className="w-5 h-5 text-primary" />
            Treatment Plan / Notes
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground whitespace-pre-wrap">
            {patientData.treatmentPlan || 'No treatment plan recorded.'}
          </p>
        </CardContent>
      </Card>

      {/* Original Transcript */}
      {(patientData.transcript || patientData.formattedTranscript) && (
        <Card className="medical-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5 text-primary" />
              Original Transcript
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[300px] w-full">
              <div className="bg-muted/30 p-4 rounded-lg">
                <pre className="text-sm text-foreground whitespace-pre-wrap font-mono">
                  {patientData.formattedTranscript || formatTranscriptWithSpeakers(patientData.transcript)}
                </pre>
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
      )}

      {/* Back to Notes Button */}
      <div className="flex justify-center pt-4">
        <Button variant="outline" onClick={onBack}>
          Back to All Notes
        </Button>
      </div>
    </div>
  );
};
